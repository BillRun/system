=============
Upgrade Guide
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The |php-library| and underlying :php:`mongodb extension <mongodb>` have notable
API differences from the legacy ``mongo`` extension. This page will summarize
those differences for the benefit of those upgrading from the legacy driver.

Additionally, a community-developed `mongo-php-adapter
<https://github.com/alcaeus/mongo-php-adapter>`_ library exists, which
implements the ``mongo`` extension API using this library and the new driver.
While this adapter library is not officially supported by MongoDB, it does bear
mentioning.

BSON Type Classes
-----------------

When upgrading from the legacy driver, type classes such as MongoId must be
replaced with classes in the
`MongoDB\\BSON namespace <https://www.php.net/manual/en/book.bson.php>`_. The
new driver also introduces interfaces for its BSON types, which should be
preferred if applications need to type hint against BSON values.

The following table lists all legacy classes alongside the equivalent class in
the new driver.

.. list-table::
   :header-rows: 1

   * - Legacy class
     - BSON type class
     - BSON type interface

   * - MongoId
     - :php:`MongoDB\\BSON\\ObjectId <mongodb_bson_objectid>`
     - :php:`MongoDB\\BSON\\ObjectIdInterface <mongodb_bson_objectidinterface>`

   * - MongoCode
     - :php:`MongoDB\\BSON\\Javascript <mongodb_bson_javascript>`
     - :php:`MongoDB\\BSON\\JavascriptInterface <mongodb_bson_javascriptinterface>`

   * - MongoDate
     - :php:`MongoDB\\BSON\\UTCDateTime <mongodb_bson_utcdatetime>`
     - :php:`MongoDB\\BSON\\UTCDateTimeInterface <mongodb_bson_utcdatetimeinterface>`

   * - MongoRegex
     - :php:`MongoDB\\BSON\\Regex <mongodb_bson_regex>`
     - :php:`MongoDB\\BSON\\RegexInterface <mongodb_bson_regexinterface>`

   * - MongoBinData
     - :php:`MongoDB\\BSON\\Binary <mongodb_bson_binary>`
     - :php:`MongoDB\\BSON\\BinaryInterface <mongodb_bson_binaryinterface>`

   * - MongoInt32
     - Not implemented. [1]_
     -

   * - MongoInt64
     - :php:`MongoDB\\BSON\\Int64 <mongodb_bson_int64>`
     - Not implemented. [2]_

   * - MongoDBRef
     - Not implemented. [3]_
     -

   * - MongoMinKey
     - :php:`MongoDB\\BSON\\MinKey <mongodb_bson_minkey>`
     - :php:`MongoDB\\BSON\\MinKeyInterface <mongodb_bson_minkeyinterface>`

   * - MongoMaxKey
     - :php:`MongoDB\\BSON\\MaxKey <mongodb_bson_maxkey>`
     - :php:`MongoDB\\BSON\\MaxKeyInterface <mongodb_bson_maxkeyinterface>`

   * - MongoTimestamp
     - :php:`MongoDB\\BSON\\Timestamp <mongodb_bson_timestamp>`
     - :php:`MongoDB\\BSON\\TimestampInterface <mongodb_bson_timestampinterface>`

.. [1] The new driver does not implement an equivalent class for MongoInt32.
   When decoding BSON, 32-bit integers will always be represented as a PHP
   integer. When encoding BSON, PHP integers will encode as either a 32-bit or
   64-bit integer depending on their value.

.. [2] :php:`MongoDB\\BSON\\Int64 <mongodb_bson_int64>` does not have an
   interface defined. The new driver does not allow applications to instantiate
   this type (i.e. its constructor is private) and it is only created during
   BSON decoding when a 64-bit integer cannot be represented as a PHP integer on
   a 32-bit platform.

.. [3] The new driver does not implement an equivalent class for MongoDBRef
   since :manual:`DBRefs </reference/database-references>` are merely a BSON
   document with a particular structure and not a proper BSON type. The new
   driver also does not provide any helpers for working with DBRef objects,
   since their use is not encouraged.

Collection API
--------------

This library's :phpclass:`MongoDB\\Collection` class implements MongoDB's
cross-driver `CRUD
<https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst>`_
and `Index Management
<https://github.com/mongodb/specifications/blob/master/source/index-management.rst>`_
specifications. Although some method names have changed in accordance with the
new specifications, the new class provides the same functionality as the legacy
driver's MongoCollection class with some notable exceptions.

A guiding principle in designing the new APIs was that explicit method names are
preferable to overloaded terms found in the old API. For instance,
``MongoCollection::save()`` and ``MongoCollection::findAndModify()`` have
different modes of operation, depending on their arguments. Methods were also
split to distinguish between :manual:`updating specific fields
</tutorial/modify-documents>` and :manual:`full-document replacement
</tutorial/modify-documents/#replace-the-document>`.

The following table lists all legacy methods alongside the
equivalent method(s) in the new driver.

.. list-table::
   :header-rows: 1

   * - MongoCollection method
     - :phpclass:`MongoDB\\Collection` method(s)

   * - ``MongoCollection::aggregate()``
     - :phpmethod:`MongoDB\\Collection::aggregate()`

   * - ``MongoCollection::aggregateCursor()``
     - :phpmethod:`MongoDB\\Collection::aggregate()`

   * - ``MongoCollection::batchInsert()``
     - :phpmethod:`MongoDB\\Collection::insertMany()`

   * - ``MongoCollection::count()``
     - :phpmethod:`MongoDB\\Collection::count()`

   * - ``MongoCollection::createDBRef()``
     - Not yet implemented. [3]_

   * - ``MongoCollection::createIndex()``
     - :phpmethod:`MongoDB\\Collection::createIndex()`

   * - ``MongoCollection::deleteIndex()``
     - :phpmethod:`MongoDB\\Collection::dropIndex()`

   * - ``MongoCollection::deleteIndexes()``
     - :phpmethod:`MongoDB\\Collection::dropIndexes()`

   * - ``MongoCollection::drop()``
     - :phpmethod:`MongoDB\\Collection::drop()`

   * - ``MongoCollection::distinct()``
     - :phpmethod:`MongoDB\\Collection::distinct()`

   * - ``MongoCollection::ensureIndex()``
     - :phpmethod:`MongoDB\\Collection::createIndex()`

   * - ``MongoCollection::find()``
     - :phpmethod:`MongoDB\\Collection::find()`

   * - ``MongoCollection::findAndModify()``
     - :phpmethod:`MongoDB\\Collection::findOneAndDelete()`,
       :phpmethod:`MongoDB\\Collection::findOneAndReplace()`, and
       :phpmethod:`MongoDB\\Collection::findOneAndUpdate()`

   * - ``MongoCollection::findOne()``
     - :phpmethod:`MongoDB\\Collection::findOne()`

   * - ``MongoCollection::getDBRef()``
     - Not implemented. [3]_

   * - ``MongoCollection::getIndexInfo()``
     - :phpmethod:`MongoDB\\Collection::listIndexes()`

   * - ``MongoCollection::getName()``
     - :phpmethod:`MongoDB\\Collection::getCollectionName()`

   * - ``MongoCollection::getReadPreference()``
     - :phpmethod:`MongoDB\\Collection::getReadPreference()`

   * - ``MongoCollection::getSlaveOkay()``
     - Not implemented.

   * - ``MongoCollection::getWriteConcern()``
     - :phpmethod:`MongoDB\\Collection::getWriteConcern()`

   * - ``MongoCollection::group()``
     - Not implemented. Use :phpmethod:`MongoDB\\Database::command()`. See
       `Group Command Helper`_ for an example.

   * - ``MongoCollection::insert()``
     - :phpmethod:`MongoDB\\Collection::insertOne()`

   * - ``MongoCollection::parallelCollectionScan()``
     - Not implemented.

   * - ``MongoCollection::remove()``
     - :phpmethod:`MongoDB\\Collection::deleteMany()` and
       :phpmethod:`MongoDB\\Collection::deleteOne()`

   * - ``MongoCollection::save()``
     - :phpmethod:`MongoDB\\Collection::insertOne()` or
       :phpmethod:`MongoDB\\Collection::replaceOne()` with the ``upsert``
       option.

   * - ``MongoCollection::setReadPreference()``
     - Not implemented. Use :phpmethod:`MongoDB\\Collection::withOptions()`.

   * - ``MongoCollection::setSlaveOkay()``
     - Not implemented.

   * - ``MongoCollection::setWriteConcern()``
     - Not implemented. Use :phpmethod:`MongoDB\\Collection::withOptions()`.

   * - ``MongoCollection::update()``
     - :phpmethod:`MongoDB\\Collection::replaceOne()`,
       :phpmethod:`MongoDB\\Collection::updateMany()`, and
       :phpmethod:`MongoDB\\Collection::updateOne()`.

   * - ``MongoCollection::validate()``
     - Not implemented.

Accessing IDs of Inserted Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the legacy driver, ``MongoCollection::insert()``,
``MongoCollection::batchInsert()``, and ``MongoCollection::save()`` (when
inserting) would modify their input argument by injecting an ``_id`` key with a
generated ObjectId (i.e. MongoId object). This behavior was a bit of a hack, as
it did not rely on the argument being :php:`passed by reference
<language.references.pass>`; instead, it directly modified memory through the
extension API and could not be implemented in PHP userland. As such, it is no
longer done in the new driver and library.

IDs of inserted documents (whether generated or not) may be accessed through the
following methods on the write result objects:

- :phpmethod:`MongoDB\\InsertOneResult::getInsertedId()` for
  :phpmethod:`MongoDB\\Collection::insertOne()`
- :phpmethod:`MongoDB\\InsertManyResult::getInsertedIds()` for
  :phpmethod:`MongoDB\\Collection::insertMany()`
- :phpmethod:`MongoDB\\BulkWriteResult::getInsertedIds()` for
  :phpmethod:`MongoDB\\Collection::bulkWrite()`

Bulk Write Operations
~~~~~~~~~~~~~~~~~~~~~

The legacy driver's MongoWriteBatch classes have been replaced with a
general-purpose :phpmethod:`MongoDB\\Collection::bulkWrite()` method. Whereas
the legacy driver only allowed bulk operations of the same type, the new method
allows operations to be mixed (e.g. inserts, updates, and deletes).

MongoCollection::save() Removed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``MongoCollection::save()``, which was syntactic sugar for an insert or upsert
operation, has been removed in favor of explicitly using
:phpmethod:`MongoDB\\Collection::insertOne` or
:phpmethod:`MongoDB\\Collection::replaceOne` (with the ``upsert`` option).

While the ``save`` method does have its uses for interactive environments, such
as the ``mongo`` shell, it was intentionally excluded from the
`CRUD specification <https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst>`_
for language drivers. Generally, application code should know if the document
has an identifier and be able to explicitly insert or replace the document and
handle the returned :phpclass:`MongoDB\\InsertOneResult` or
:phpclass:`MongoDB\\UpdateResult`, respectively. This also helps avoid
inadvertent and potentially dangerous :manual:`full-document replacements
</tutorial/modify-documents>`.

Group Command Helper
~~~~~~~~~~~~~~~~~~~~

:phpclass:`MongoDB\\Collection` does have a helper method for the
:manual:`group </reference/command/group>` command. The following example
demonstrates how to execute a group command using the
:phpmethod:`MongoDB\\Database::command()` method:

.. code-block:: php

   <?php

   $database = (new MongoDB\Client)->selectDatabase('db_name');
   $cursor = $database->command([
       'group' => [
           'ns' => 'collection_name',
           'key' => ['field_name' => 1],
           'initial' => ['total' => 0],
           '$reduce' => new MongoDB\BSON\Javascript('...'),
       ],
   ]);

   $resultDocument = $cursor->toArray()[0];
